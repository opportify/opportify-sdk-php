<?php

/**
 * AnalyzeEmail200Response
 *
 * PHP version 7.4
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @link     https://openapi-generator.tech
 */

/**
 * Opportify Insights API
 *
 * ## Overview  The **Opportify Insights API** provides access to a powerful and up-to-date platform. With advanced data warehousing and AI-driven capabilities, this API is designed to empower your business to make informed, data-driven decisions and effectively assess potential risks.  ### Base URL Use the following base URL for all API requests:  ```plaintext https://api.opportify.ai/insights/v1/<service>/<endpoint> ```  ### Features - [**Email Insights:**](/docs/api/api-reference/email-insights)   - Validate email syntax.   - Identify email types (free, disposable, corporate or unknown).   - Real time verifications:     - Reachable: Confirms if the email domain has valid MX DNS records using DNS lookup.     - Deliverable: Simulates an SMTP handshake to check if the email address exists and is deliverable.     - Catch-All: Detects if the domain accepts all emails (catch-all configuration).   - Intelligent Error Correction: Automatically corrects well-known misspelled email addresses.   - Risk Report: Provides an AI-driven normalized score (200-1000) to evaluate email risk, using predefined thresholds.      [Access Documentation >>](/docs/api/api-reference/email-insights)  - [**IP Insights:**](/docs/api/api-reference/ip-insights)   - Connection types: Detects connection types such as `wired`, `mobile`, `enterprise`, `satellite`, `VPN`, `cloud-provider`, `open-proxy`, or `Tor`.   - Geo location: Delivers detailed insights such as country, city, timezone, language preferences, and additional location-based information to enhance regional understanding.   - WHOIS: Provides main details including RIR, ASN, organization, and abuse/admin/technical contacts.   - Trusted Provider Recognition: Identifies if the IP is part of a known trusted provider (e.g., ZTNA - Zero Trust Network Access).   - Blocklist Reports: Retrieves up-to-date blocklist statuses, active reports, and the latest detections.   - Risk Report: Delivers an AI-driven normalized score (200-1000) to evaluate IP risk, supported by predefined thresholds.    [Access Documentation >>](/docs/api/api-reference/ip-insights)  ### Authentication & Security - **API Key:** Access to the API requires an API key, which must be included in the request headers. Businesses can generate unlimited API keys directly from their account, offering flexibility and ease of use.  - **ACL Rules:** Enhance security with Access Control Lists (ACL), allowing you to restrict API access from specific IP addresses or ranges. This feature provides an additional layer of protection by ensuring only authorized IPs can interact with the API. - **No Query Parameters:** As a precautionary measure, our API avoids the use of query parameters for all operations, including authentication and handling Personally Identifiable Information (PII). This approach minimizes security risks by preventing sensitive data from being exposed in access logs, browser history, cached URLs, debugging tools, or inadvertently shared URLs. All sensitive information is securely transmitted through headers or the request body.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use OpenAPI\Client\ObjectSerializer;

/**
 * AnalyzeEmail200Response Class Doc Comment
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @link     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 */
class AnalyzeEmail200Response implements \JsonSerializable, ArrayAccess, ModelInterface
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'analyzeEmail_200_response';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'email_address' => 'string',
        'email_provider' => 'string',
        'email_type' => 'string',
        'is_format_valid' => 'bool',
        'email_correction' => 'string',
        'is_deliverable' => 'string',
        'is_catch_all' => 'bool',
        'is_mailbox_full' => 'bool',
        'is_reachable' => 'bool',
        'email_dns' => '\OpenAPI\Client\Model\EmailDNS',
        'risk_report' => '\OpenAPI\Client\Model\RiskReportEmail',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'email_address' => null,
        'email_provider' => null,
        'email_type' => null,
        'is_format_valid' => null,
        'email_correction' => null,
        'is_deliverable' => null,
        'is_catch_all' => null,
        'is_mailbox_full' => null,
        'is_reachable' => null,
        'email_dns' => null,
        'risk_report' => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'email_address' => false,
        'email_provider' => false,
        'email_type' => false,
        'is_format_valid' => false,
        'email_correction' => false,
        'is_deliverable' => false,
        'is_catch_all' => false,
        'is_mailbox_full' => false,
        'is_reachable' => false,
        'email_dns' => false,
        'risk_report' => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param  bool[]  $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'email_address' => 'emailAddress',
        'email_provider' => 'emailProvider',
        'email_type' => 'emailType',
        'is_format_valid' => 'isFormatValid',
        'email_correction' => 'emailCorrection',
        'is_deliverable' => 'isDeliverable',
        'is_catch_all' => 'isCatchAll',
        'is_mailbox_full' => 'isMailboxFull',
        'is_reachable' => 'isReachable',
        'email_dns' => 'emailDNS',
        'risk_report' => 'riskReport',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'email_address' => 'setEmailAddress',
        'email_provider' => 'setEmailProvider',
        'email_type' => 'setEmailType',
        'is_format_valid' => 'setIsFormatValid',
        'email_correction' => 'setEmailCorrection',
        'is_deliverable' => 'setIsDeliverable',
        'is_catch_all' => 'setIsCatchAll',
        'is_mailbox_full' => 'setIsMailboxFull',
        'is_reachable' => 'setIsReachable',
        'email_dns' => 'setEmailDns',
        'risk_report' => 'setRiskReport',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'email_address' => 'getEmailAddress',
        'email_provider' => 'getEmailProvider',
        'email_type' => 'getEmailType',
        'is_format_valid' => 'getIsFormatValid',
        'email_correction' => 'getEmailCorrection',
        'is_deliverable' => 'getIsDeliverable',
        'is_catch_all' => 'getIsCatchAll',
        'is_mailbox_full' => 'getIsMailboxFull',
        'is_reachable' => 'getIsReachable',
        'email_dns' => 'getEmailDns',
        'risk_report' => 'getRiskReport',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param  mixed[]  $data  Associated array of property values
     *                         initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('email_address', $data ?? [], null);
        $this->setIfExists('email_provider', $data ?? [], null);
        $this->setIfExists('email_type', $data ?? [], null);
        $this->setIfExists('is_format_valid', $data ?? [], null);
        $this->setIfExists('email_correction', $data ?? [], null);
        $this->setIfExists('is_deliverable', $data ?? [], null);
        $this->setIfExists('is_catch_all', $data ?? [], null);
        $this->setIfExists('is_mailbox_full', $data ?? [], null);
        $this->setIfExists('is_reachable', $data ?? [], null);
        $this->setIfExists('email_dns', $data ?? [], null);
        $this->setIfExists('risk_report', $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array
     *
     * @param  mixed  $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['email_address'] === null) {
            $invalidProperties[] = "'email_address' can't be null";
        }
        if ($this->container['email_provider'] === null) {
            $invalidProperties[] = "'email_provider' can't be null";
        }
        if ($this->container['email_type'] === null) {
            $invalidProperties[] = "'email_type' can't be null";
        }
        if ($this->container['is_format_valid'] === null) {
            $invalidProperties[] = "'is_format_valid' can't be null";
        }
        if ($this->container['email_correction'] === null) {
            $invalidProperties[] = "'email_correction' can't be null";
        }
        if ($this->container['is_deliverable'] === null) {
            $invalidProperties[] = "'is_deliverable' can't be null";
        }
        if ($this->container['is_catch_all'] === null) {
            $invalidProperties[] = "'is_catch_all' can't be null";
        }
        if ($this->container['is_mailbox_full'] === null) {
            $invalidProperties[] = "'is_mailbox_full' can't be null";
        }
        if ($this->container['is_reachable'] === null) {
            $invalidProperties[] = "'is_reachable' can't be null";
        }
        if ($this->container['email_dns'] === null) {
            $invalidProperties[] = "'email_dns' can't be null";
        }
        if ($this->container['risk_report'] === null) {
            $invalidProperties[] = "'risk_report' can't be null";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets email_address
     *
     * @return string
     */
    public function getEmailAddress()
    {
        return $this->container['email_address'];
    }

    /**
     * Sets email_address
     *
     * @param  string  $email_address  The validated email address.
     * @return self
     */
    public function setEmailAddress($email_address)
    {
        if (is_null($email_address)) {
            throw new \InvalidArgumentException('non-nullable email_address cannot be null');
        }
        $this->container['email_address'] = $email_address;

        return $this;
    }

    /**
     * Gets email_provider
     *
     * @return string
     */
    public function getEmailProvider()
    {
        return $this->container['email_provider'];
    }

    /**
     * Sets email_provider
     *
     * @param  string  $email_provider  The email provider or domain name.
     * @return self
     */
    public function setEmailProvider($email_provider)
    {
        if (is_null($email_provider)) {
            throw new \InvalidArgumentException('non-nullable email_provider cannot be null');
        }
        $this->container['email_provider'] = $email_provider;

        return $this;
    }

    /**
     * Gets email_type
     *
     * @return string
     */
    public function getEmailType()
    {
        return $this->container['email_type'];
    }

    /**
     * Sets email_type
     *
     * @param  string  $email_type  Type of email address (e.g., free, disposable, private, unknown).
     * @return self
     */
    public function setEmailType($email_type)
    {
        if (is_null($email_type)) {
            throw new \InvalidArgumentException('non-nullable email_type cannot be null');
        }
        $this->container['email_type'] = $email_type;

        return $this;
    }

    /**
     * Gets is_format_valid
     *
     * @return bool
     */
    public function getIsFormatValid()
    {
        return $this->container['is_format_valid'];
    }

    /**
     * Sets is_format_valid
     *
     * @param  bool  $is_format_valid  Indicates if the email address has a valid format.
     * @return self
     */
    public function setIsFormatValid($is_format_valid)
    {
        if (is_null($is_format_valid)) {
            throw new \InvalidArgumentException('non-nullable is_format_valid cannot be null');
        }
        $this->container['is_format_valid'] = $is_format_valid;

        return $this;
    }

    /**
     * Gets email_correction
     *
     * @return string
     */
    public function getEmailCorrection()
    {
        return $this->container['email_correction'];
    }

    /**
     * Sets email_correction
     *
     * @param  string  $email_correction  Suggested corrected email address, if applicable.
     * @return self
     */
    public function setEmailCorrection($email_correction)
    {
        if (is_null($email_correction)) {
            throw new \InvalidArgumentException('non-nullable email_correction cannot be null');
        }
        $this->container['email_correction'] = $email_correction;

        return $this;
    }

    /**
     * Gets is_deliverable
     *
     * @return string
     */
    public function getIsDeliverable()
    {
        return $this->container['is_deliverable'];
    }

    /**
     * Sets is_deliverable
     *
     * @param  string  $is_deliverable  Checks if the email address exists and is deliverable using SMTP handshake simulation. This involves connecting to the mail server and issuing commands to verify deliverability. The possible answers are `yes`, `no`, or `unknown`. We guarantee a high confidence level on this parameter since this is a real time verification.
     * @return self
     */
    public function setIsDeliverable($is_deliverable)
    {
        if (is_null($is_deliverable)) {
            throw new \InvalidArgumentException('non-nullable is_deliverable cannot be null');
        }
        $this->container['is_deliverable'] = $is_deliverable;

        return $this;
    }

    /**
     * Gets is_catch_all
     *
     * @return bool
     */
    public function getIsCatchAll()
    {
        return $this->container['is_catch_all'];
    }

    /**
     * Sets is_catch_all
     *
     * @param  bool  $is_catch_all  Determines if the email domain is configured as a catch-all, which accepts emails for all addresses within the domain. This is verified through multiple email tests.
     * @return self
     */
    public function setIsCatchAll($is_catch_all)
    {
        if (is_null($is_catch_all)) {
            throw new \InvalidArgumentException('non-nullable is_catch_all cannot be null');
        }
        $this->container['is_catch_all'] = $is_catch_all;

        return $this;
    }

    /**
     * Gets is_mailbox_full
     *
     * @return bool
     */
    public function getIsMailboxFull()
    {
        return $this->container['is_mailbox_full'];
    }

    /**
     * Sets is_mailbox_full
     *
     * @param  bool  $is_mailbox_full  Determines if the mailbox associated with the email is full, in association with isDeliverable field, it can give a reason why the email is not deliverable.
     * @return self
     */
    public function setIsMailboxFull($is_mailbox_full)
    {
        if (is_null($is_mailbox_full)) {
            throw new \InvalidArgumentException('non-nullable is_mailbox_full cannot be null');
        }
        $this->container['is_mailbox_full'] = $is_mailbox_full;

        return $this;
    }

    /**
     * Gets is_reachable
     *
     * @return bool
     */
    public function getIsReachable()
    {
        return $this->container['is_reachable'];
    }

    /**
     * Sets is_reachable
     *
     * @param  bool  $is_reachable  Confirms if the email domain has valid MX DNS records using DNS lookup.
     * @return self
     */
    public function setIsReachable($is_reachable)
    {
        if (is_null($is_reachable)) {
            throw new \InvalidArgumentException('non-nullable is_reachable cannot be null');
        }
        $this->container['is_reachable'] = $is_reachable;

        return $this;
    }

    /**
     * Gets email_dns
     *
     * @return \OpenAPI\Client\Model\EmailDNS
     */
    public function getEmailDns()
    {
        return $this->container['email_dns'];
    }

    /**
     * Sets email_dns
     *
     * @param  \OpenAPI\Client\Model\EmailDNS  $email_dns  email_dns
     * @return self
     */
    public function setEmailDns($email_dns)
    {
        if (is_null($email_dns)) {
            throw new \InvalidArgumentException('non-nullable email_dns cannot be null');
        }
        $this->container['email_dns'] = $email_dns;

        return $this;
    }

    /**
     * Gets risk_report
     *
     * @return \OpenAPI\Client\Model\RiskReportEmail
     */
    public function getRiskReport()
    {
        return $this->container['risk_report'];
    }

    /**
     * Sets risk_report
     *
     * @param  \OpenAPI\Client\Model\RiskReportEmail  $risk_report  risk_report
     * @return self
     */
    public function setRiskReport($risk_report)
    {
        if (is_null($risk_report)) {
            throw new \InvalidArgumentException('non-nullable risk_report cannot be null');
        }
        $this->container['risk_report'] = $risk_report;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  int  $offset  Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  int  $offset  Offset
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  int|null  $offset  Offset
     * @param  mixed  $value  Value to be set
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  int  $offset  Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
