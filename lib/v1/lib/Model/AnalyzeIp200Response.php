<?php
/**
 * AnalyzeIp200Response
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Opportify Insights API
 *
 * ## Overview  The **Opportify Insights API** provides access to a powerful and up-to-date platform. With advanced data warehousing and AI-driven capabilities, this API is designed to empower your business to make informed, data-driven decisions and effectively assess potential risks.  ### Base URL Use the following base URL for all API requests:  ```plaintext https://api.opportify.ai/insights/v1/<service>/<endpoint> ```  ### Features - [**Email Insights:**](/docs/api/api-reference/email-insights)   - Validate email syntax.   - Identify email types (free, disposable, corporate or unknown).   - Real time verifications:     - Reachable: Confirms if the email domain has valid MX DNS records using DNS lookup.     - Deliverable: Simulates an SMTP handshake to check if the email address exists and is deliverable.     - Catch-All: Detects if the domain accepts all emails (catch-all configuration).   - Intelligent Error Correction: Automatically corrects well-known misspelled email addresses.   - Risk Report: Provides an AI-driven normalized score (200-1000) to evaluate email risk, using predefined thresholds.      [Access Documentation >>](/docs/api/api-reference/email-insights)  - [**IP Insights:**](/docs/api/api-reference/ip-insights)   - Connection types: Detects connection types such as `wired`, `mobile`, `enterprise`, `satellite`, `VPN`, `cloud-provider`, `open-proxy`, or `Tor`.   - Geo location: Delivers detailed insights such as country, city, timezone, language preferences, and additional location-based information to enhance regional understanding.   - WHOIS: Provides main details including RIR, ASN, organization, and abuse/admin/technical contacts.   - Trusted Provider Recognition: Identifies if the IP is part of a known trusted provider (e.g., ZTNA - Zero Trust Network Access).   - Blocklist Reports: Retrieves up-to-date blocklist statuses, active reports, and the latest detections.   - Risk Report: Delivers an AI-driven normalized score (200-1000) to evaluate IP risk, supported by predefined thresholds.    [Access Documentation >>](/docs/api/api-reference/ip-insights)  ### Authentication & Security - **API Key:** Access to the API requires an API key, which must be included in the request headers. Businesses can generate unlimited API keys directly from their account, offering flexibility and ease of use.  - **ACL Rules:** Enhance security with Access Control Lists (ACL), allowing you to restrict API access from specific IP addresses or ranges. This feature provides an additional layer of protection by ensuring only authorized IPs can interact with the API. - **No Query Parameters:** As a precautionary measure, our API avoids the use of query parameters for all operations, including authentication and handling Personally Identifiable Information (PII). This approach minimizes security risks by preventing sensitive data from being exposed in access logs, browser history, cached URLs, debugging tools, or inadvertently shared URLs. All sensitive information is securely transmitted through headers or the request body.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AnalyzeIp200Response Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AnalyzeIp200Response implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'analyzeIp_200_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ip_address' => 'string',
        'ip_address_number' => 'int',
        'ip_type' => 'string',
        'ip_cidr' => 'string',
        'connection_type' => 'string',
        'host_reverse' => 'string',
        'geo' => '\OpenAPI\Client\Model\Geo',
        'whois' => '\OpenAPI\Client\Model\Whois',
        'trusted_provider' => '\OpenAPI\Client\Model\TrustedProvider',
        'blocklisted' => '\OpenAPI\Client\Model\BlockListed',
        'risk_report' => '\OpenAPI\Client\Model\RiskReportIp'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'ip_address' => null,
        'ip_address_number' => null,
        'ip_type' => null,
        'ip_cidr' => null,
        'connection_type' => null,
        'host_reverse' => null,
        'geo' => null,
        'whois' => null,
        'trusted_provider' => null,
        'blocklisted' => null,
        'risk_report' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'ip_address' => false,
        'ip_address_number' => false,
        'ip_type' => false,
        'ip_cidr' => false,
        'connection_type' => false,
        'host_reverse' => false,
        'geo' => false,
        'whois' => false,
        'trusted_provider' => false,
        'blocklisted' => false,
        'risk_report' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ip_address' => 'ipAddress',
        'ip_address_number' => 'ipAddressNumber',
        'ip_type' => 'ipType',
        'ip_cidr' => 'ipCidr',
        'connection_type' => 'connectionType',
        'host_reverse' => 'hostReverse',
        'geo' => 'geo',
        'whois' => 'whois',
        'trusted_provider' => 'trustedProvider',
        'blocklisted' => 'blocklisted',
        'risk_report' => 'riskReport'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ip_address' => 'setIpAddress',
        'ip_address_number' => 'setIpAddressNumber',
        'ip_type' => 'setIpType',
        'ip_cidr' => 'setIpCidr',
        'connection_type' => 'setConnectionType',
        'host_reverse' => 'setHostReverse',
        'geo' => 'setGeo',
        'whois' => 'setWhois',
        'trusted_provider' => 'setTrustedProvider',
        'blocklisted' => 'setBlocklisted',
        'risk_report' => 'setRiskReport'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ip_address' => 'getIpAddress',
        'ip_address_number' => 'getIpAddressNumber',
        'ip_type' => 'getIpType',
        'ip_cidr' => 'getIpCidr',
        'connection_type' => 'getConnectionType',
        'host_reverse' => 'getHostReverse',
        'geo' => 'getGeo',
        'whois' => 'getWhois',
        'trusted_provider' => 'getTrustedProvider',
        'blocklisted' => 'getBlocklisted',
        'risk_report' => 'getRiskReport'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('ip_address', $data ?? [], null);
        $this->setIfExists('ip_address_number', $data ?? [], null);
        $this->setIfExists('ip_type', $data ?? [], null);
        $this->setIfExists('ip_cidr', $data ?? [], null);
        $this->setIfExists('connection_type', $data ?? [], null);
        $this->setIfExists('host_reverse', $data ?? [], null);
        $this->setIfExists('geo', $data ?? [], null);
        $this->setIfExists('whois', $data ?? [], null);
        $this->setIfExists('trusted_provider', $data ?? [], null);
        $this->setIfExists('blocklisted', $data ?? [], null);
        $this->setIfExists('risk_report', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['ip_address'] === null) {
            $invalidProperties[] = "'ip_address' can't be null";
        }
        if ($this->container['ip_address_number'] === null) {
            $invalidProperties[] = "'ip_address_number' can't be null";
        }
        if ($this->container['ip_type'] === null) {
            $invalidProperties[] = "'ip_type' can't be null";
        }
        if ($this->container['ip_cidr'] === null) {
            $invalidProperties[] = "'ip_cidr' can't be null";
        }
        if ($this->container['connection_type'] === null) {
            $invalidProperties[] = "'connection_type' can't be null";
        }
        if ($this->container['host_reverse'] === null) {
            $invalidProperties[] = "'host_reverse' can't be null";
        }
        if ($this->container['geo'] === null) {
            $invalidProperties[] = "'geo' can't be null";
        }
        if ($this->container['whois'] === null) {
            $invalidProperties[] = "'whois' can't be null";
        }
        if ($this->container['trusted_provider'] === null) {
            $invalidProperties[] = "'trusted_provider' can't be null";
        }
        if ($this->container['blocklisted'] === null) {
            $invalidProperties[] = "'blocklisted' can't be null";
        }
        if ($this->container['risk_report'] === null) {
            $invalidProperties[] = "'risk_report' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ip_address
     *
     * @return string
     */
    public function getIpAddress()
    {
        return $this->container['ip_address'];
    }

    /**
     * Sets ip_address
     *
     * @param string $ip_address The analyzed IP address.
     *
     * @return self
     */
    public function setIpAddress($ip_address)
    {
        if (is_null($ip_address)) {
            throw new \InvalidArgumentException('non-nullable ip_address cannot be null');
        }
        $this->container['ip_address'] = $ip_address;

        return $this;
    }

    /**
     * Gets ip_address_number
     *
     * @return int
     */
    public function getIpAddressNumber()
    {
        return $this->container['ip_address_number'];
    }

    /**
     * Sets ip_address_number
     *
     * @param int $ip_address_number Numeric representation of the IP address.
     *
     * @return self
     */
    public function setIpAddressNumber($ip_address_number)
    {
        if (is_null($ip_address_number)) {
            throw new \InvalidArgumentException('non-nullable ip_address_number cannot be null');
        }
        $this->container['ip_address_number'] = $ip_address_number;

        return $this;
    }

    /**
     * Gets ip_type
     *
     * @return string
     */
    public function getIpType()
    {
        return $this->container['ip_type'];
    }

    /**
     * Sets ip_type
     *
     * @param string $ip_type Type of the IP address (IPv4 or IPv6).
     *
     * @return self
     */
    public function setIpType($ip_type)
    {
        if (is_null($ip_type)) {
            throw new \InvalidArgumentException('non-nullable ip_type cannot be null');
        }
        $this->container['ip_type'] = $ip_type;

        return $this;
    }

    /**
     * Gets ip_cidr
     *
     * @return string
     */
    public function getIpCidr()
    {
        return $this->container['ip_cidr'];
    }

    /**
     * Sets ip_cidr
     *
     * @param string $ip_cidr CIDR notation of the IP address.
     *
     * @return self
     */
    public function setIpCidr($ip_cidr)
    {
        if (is_null($ip_cidr)) {
            throw new \InvalidArgumentException('non-nullable ip_cidr cannot be null');
        }
        $this->container['ip_cidr'] = $ip_cidr;

        return $this;
    }

    /**
     * Gets connection_type
     *
     * @return string
     */
    public function getConnectionType()
    {
        return $this->container['connection_type'];
    }

    /**
     * Sets connection_type
     *
     * @param string $connection_type The **connectionType** element provides information about the type of connection associated with a given IP address. Our system employs a **dynamic and evolving approach**, leveraging multiple data points to identify the connection type as accurately as possible.  - **wired**: A traditional wired connection (e.g., DSL, fiber, cable). - **mobile**: A mobile network connection (e.g., 4G, 5G). - **enterprise**: A connection from a known large business or corporate network. - **satellite**: A satellite internet connection. - **vpn**: A connection routed through a Virtual Private Network. - **cloud-provider**: A connection from a cloud hosting provider (e.g., AWS, Azure). - **open-proxy**: A connection using an open or public proxy. - **tor**: A connection routed through the Tor network.
     *
     * @return self
     */
    public function setConnectionType($connection_type)
    {
        if (is_null($connection_type)) {
            throw new \InvalidArgumentException('non-nullable connection_type cannot be null');
        }
        $this->container['connection_type'] = $connection_type;

        return $this;
    }

    /**
     * Gets host_reverse
     *
     * @return string
     */
    public function getHostReverse()
    {
        return $this->container['host_reverse'];
    }

    /**
     * Sets host_reverse
     *
     * @param string $host_reverse Real time reverse DNS lookup result for the IP address.
     *
     * @return self
     */
    public function setHostReverse($host_reverse)
    {
        if (is_null($host_reverse)) {
            throw new \InvalidArgumentException('non-nullable host_reverse cannot be null');
        }
        $this->container['host_reverse'] = $host_reverse;

        return $this;
    }

    /**
     * Gets geo
     *
     * @return \OpenAPI\Client\Model\Geo
     */
    public function getGeo()
    {
        return $this->container['geo'];
    }

    /**
     * Sets geo
     *
     * @param \OpenAPI\Client\Model\Geo $geo geo
     *
     * @return self
     */
    public function setGeo($geo)
    {
        if (is_null($geo)) {
            throw new \InvalidArgumentException('non-nullable geo cannot be null');
        }
        $this->container['geo'] = $geo;

        return $this;
    }

    /**
     * Gets whois
     *
     * @return \OpenAPI\Client\Model\Whois
     */
    public function getWhois()
    {
        return $this->container['whois'];
    }

    /**
     * Sets whois
     *
     * @param \OpenAPI\Client\Model\Whois $whois whois
     *
     * @return self
     */
    public function setWhois($whois)
    {
        if (is_null($whois)) {
            throw new \InvalidArgumentException('non-nullable whois cannot be null');
        }
        $this->container['whois'] = $whois;

        return $this;
    }

    /**
     * Gets trusted_provider
     *
     * @return \OpenAPI\Client\Model\TrustedProvider
     */
    public function getTrustedProvider()
    {
        return $this->container['trusted_provider'];
    }

    /**
     * Sets trusted_provider
     *
     * @param \OpenAPI\Client\Model\TrustedProvider $trusted_provider trusted_provider
     *
     * @return self
     */
    public function setTrustedProvider($trusted_provider)
    {
        if (is_null($trusted_provider)) {
            throw new \InvalidArgumentException('non-nullable trusted_provider cannot be null');
        }
        $this->container['trusted_provider'] = $trusted_provider;

        return $this;
    }

    /**
     * Gets blocklisted
     *
     * @return \OpenAPI\Client\Model\BlockListed
     */
    public function getBlocklisted()
    {
        return $this->container['blocklisted'];
    }

    /**
     * Sets blocklisted
     *
     * @param \OpenAPI\Client\Model\BlockListed $blocklisted blocklisted
     *
     * @return self
     */
    public function setBlocklisted($blocklisted)
    {
        if (is_null($blocklisted)) {
            throw new \InvalidArgumentException('non-nullable blocklisted cannot be null');
        }
        $this->container['blocklisted'] = $blocklisted;

        return $this;
    }

    /**
     * Gets risk_report
     *
     * @return \OpenAPI\Client\Model\RiskReportIp
     */
    public function getRiskReport()
    {
        return $this->container['risk_report'];
    }

    /**
     * Sets risk_report
     *
     * @param \OpenAPI\Client\Model\RiskReportIp $risk_report risk_report
     *
     * @return self
     */
    public function setRiskReport($risk_report)
    {
        if (is_null($risk_report)) {
            throw new \InvalidArgumentException('non-nullable risk_report cannot be null');
        }
        $this->container['risk_report'] = $risk_report;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


